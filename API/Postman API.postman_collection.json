{
	"info": {
		"_postman_id": "d1d4a2d3-a595-4a14-bef8-d7d3178b6aac",
		"name": "Postman API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17362952"
	},
	"item": [
		{
			"name": "account",
			"item": [
				{
					"name": "register",
					"item": [
						{
							"name": "register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sign up in successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Return value of message is Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"linhchi\",\r\n    \"email\":\"mailinhchi@gmail.com\",\r\n    \"password\":\"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with exits email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Email already in use!\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Return value of message is Email already in use!\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email already in use!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"linhchi\",\r\n    \"email\":\"mailinhchi@gmail.com\",\r\n    \"password\":\"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logged in successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Return value of message is Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin@gmail.com\",\r\n    \"password\":\"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login with wrong email or password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Incorrect email or password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Return value of message is Incorrect email or password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Incorrect email or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"linhchi432@gmail.com\",\r\n    \"password\":\"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get list users successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return value of users is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.users).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "find user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful search\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return value of message is Success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/users/admin@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"users",
								"admin@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Xóa dữ liệu thành công\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Return value of message is Deleted successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/users/mailinhchi@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"users",
								"mailinhchi@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "find user with wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is not found!!\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Return value of message is User is not found!!\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User is not found!!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/users/linh222chi@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"users",
								"linh222chi@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user with wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is not found!!\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Return value of message is User is not found!!\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User is not found!!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/users/abc@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"users",
								"abc@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edited user successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"Linh Chi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit user with wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User is not found!!\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"Linh Chi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "list of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get datas sucessfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes"
							]
						}
					},
					"response": []
				},
				{
					"name": "find product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful search\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Return value of users is an object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "find product with wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed search\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes",
								"10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "order a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clothesId\": 1,\r\n    \"customerName\": \"Mai Linh Chi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "order a product not available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The product is out of stock\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clothes\": 4,\r\n    \"customerName\": \"Mai Linh Chi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/auth/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search a order successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/orders/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update a order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated a order successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"Linh Chi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/orders/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleted successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/orders/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all orders successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a order with wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get datas failed\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNjU2NzU5ODc1LCJleHAiOjE2NTY4NDYyNzV9.olMqb6N8is9eg9FCogaZN26ucPhZ88w13o85FvfKwgs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/auth/orders/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"orders",
								"10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sortProduct",
			"item": [
				{
					"name": "sort by type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sort by type is successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"function checkTrademark(data, value) {\r",
									"    return data.every(data => data.type.toLowerCase() === value.toLowerCase())\r",
									"}\r",
									"\r",
									"pm.test(\"Return value is a array products with type valid \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const query = pm.request.url.query;\r",
									"    const queryType = query.find(item => item.key === \"type\");\r",
									"    pm.expect(checkTrademark(jsonData.data.users, queryType.value)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes/sort?type=pants",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes",
								"sort"
							],
							"query": [
								{
									"key": "type",
									"value": "pants"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sort by trademark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sort by trademark is successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"function checkTrademark(data, value) {\r",
									"    return data.every(data => data.trademark.toLowerCase() === value.toLowerCase())\r",
									"}\r",
									"\r",
									"pm.test(\"Return value is array with trademark valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const query = pm.request.url.query;\r",
									"    const queryType = query.find(item => item.key === \"trademark\");\r",
									"    pm.expect(checkTrademark(jsonData.data.users, queryType.value)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes/sort?trademark=kappa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes",
								"sort"
							],
							"query": [
								{
									"key": "trademark",
									"value": "kappa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sort by type and trademark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sort by trademark is successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"function checkTrademark(data, valueType, valueTrademark) {\r",
									"    return data.every(data => data.type.toLowerCase() === valueType.toLowerCase() && data.trademark.toLowerCase() === valueTrademark.toLowerCase())\r",
									"}\r",
									"\r",
									"pm.test(\"Return value is array with trademark and type valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const query = pm.request.url.query;\r",
									"    const queryType = query.find(item => item.key === \"type\");\r",
									"    const queryTrademark = query.find(item => item.key === \"trademark\");\r",
									"    pm.expect(checkTrademark(jsonData.data.users, queryType.value, queryTrademark.value)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/clothes/sort?type=pants&trademark=kappa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"clothes",
								"sort"
							],
							"query": [
								{
									"key": "type",
									"value": "pants"
								},
								{
									"key": "trademark",
									"value": "kappa"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}